<?php
/**
 * Created by PhpStorm.
 * User: lixun
 * Date: 2017/6/29
 * Time: 11:51
 */

namespace frontend\controllers;


use backend\models\Article;
use backend\models\ArticleCategory;
use backend\models\Goods;
use backend\models\GoodsCategory;
use frontend\models\Cart;
use frontend\models\Member;
use frontend\models\Order;
use frontend\models\OrderGoods;
use frontend\models\ShippingAddress;
use yii\captcha\CaptchaAction;
use yii\db\Exception;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\Cookie;
use yii\web\Response;
use yii\web\UploadedFile;

class ApiController extends Controller
{

    public $enableCsrfValidation = false;

    public function init()
    {
        \Yii::$app->response->format = Response::FORMAT_JSON;
        parent::init(); // TODO: Change the autogenerated stub
    }


    //会员注册post
    public function actionRegister(){

        $request = \Yii::$app->request;
        if($request->isPost){
            $member = new Member();
            $member->scenario = Member::SCENARIO_API_REGISTER;
            $member->username = $request->post('username');
            $member->password = $request->post('password');
            $member->cfirmPassword =$request->post('cfirmPassword');
            $member->code = $request->post('code');
            $member->email = $request->post('email');
            $member->tel = $request->post('tel');

            if($member->validate()){ //这一步调用了表单模型的验证，因为没用load所有前面的加载数据没有验证
                $member->save();

                return ['status'=>true,'msg'=>'','result'=>$member->toArray()];
            }
            //验证失败
            return ['status'=>false,'msg'=>$member->getErrors()];

        }
        return ['status'=>false,'msg'=>'请使用post请求'];


    }

    //验证码
//http://www.yii2shop.com/api/captcha 请求验证码
//http://www.yii2shop.com/api/captcha?refresh=1 刷新验证码 返回新的验证码地址v=595906ef33891
//http://www.yii2shop.com/api/captcha?v=595906ef33891 再次请求

    public function actions()
    {
        return [
            'captcha'=>[
                'class'=>CaptchaAction::className(),
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
                'minLength'=>3,
                'maxLength'=>3,
            ],

        ];
    }

    //会员登录post
    public function actionLogin(){
        $request = \Yii::$app->request;
        if($request->isPost){
            if($member = Member::findOne(['username'=>$request->post('username')]) ){
                if(\Yii::$app->security->validatePassword($request->post('password'),$member->password_hash)){
                    \Yii::$app->user->login($member);
                    $member->last_login_time = time();
                    $member->last_login_ip = $request->userIP;

                    $member->save(false);
                    return ['status'=>true,'msg'=>'登录成功'];
                }
            }
            return ['status'=>false,'msg'=>'账号或密码错误'];
        }
        return ['status'=>false,'msg'=>'请使用post请求'];

    }

    //修改密码(旧密码，新密码，确认新密码)
    public function actionResetPwd(){
        $request = \Yii::$app->request;
        if($request->isPost){
            $password_hash = \Yii::$app->user->identity->password_hash;
            $password_old = $request->post('password_old');
            //旧密码判断
            if(!\Yii::$app->security->validatePassword($password_old,$password_hash)){
                return ['status'=>false,'msg'=>'旧密码错误'];
            }
            $password_new = $request->post('password_new');
            //更新密码
            $member = Member::findOne(['id'=>\Yii::$app->user->id]);
            $member->password = $password_new;
            $member->cfirmPassword =$request->post('cfirmPassword');

            if($member->validate()){ //这一步调用了表单模型的验证，因为没用load所有前面的加载数据没有验证
                $member->save();
                return ['status'=>true,'msg'=>'','result'=>$member->toArray()];
            }
            //验证失败
            return ['status'=>false,'msg'=>$member->getErrors()];
        }
        return ['status'=>false,'msg'=>'请使用post请求'];

    }
    //注销登录
    public function actionLogout(){
        \Yii::$app->user->logout();
        return ['status'=>true,'msg'=>'注销成功'];
    }

    //获取当前登录的用户信息
    public function actionLoginInfo(){
        if(\Yii::$app->user->isGuest){
            return ['status'=>false,'msg'=>'请先登录'];
        }
        return ['status'=>true,'msg'=>'','result'=>\Yii::$app->user->identity->toArray()];

    }

    //地址列表
    public function actionUserAddress(){
        $member_id = \Yii::$app->user->id;
        $models = ShippingAddress::find()->where(['member_id'=>$member_id])->asArray()->all();
        return ['status'=>true,'msg'=>'','result'=>$models];
    }

    //用户新增地址
    public function actionUserAddressAdd(){
        $request = \Yii::$app->request;
        if($request->post()){
            $address = new ShippingAddress();
            $address->name = $request->post('name');
            $address->p_id = $request->post('p_id');
            $address->c_id = $request->post('c_id');
            $address->a_id = $request->post('a_id');
            $address->address = $request->post('address');
            $address->tel = $request->post('tel');
            $address->select = $request->post('select');
            $address->member_id = 1;
            if($address->validate()){
                $address->save();
                return ['status'=>true,'msg'=>'添加成功','result'=>$address->toArray()];
            }
            //验证失败
            return ['status'=>false,'msg'=>$address->getErrors()];

        }
        return ['status'=>false,'msg'=>'请使用post请求'];
    }

    //用户修改地址
    public function actionUserAddressEdit()
    {
        $request = \Yii::$app->request;
        //get请求,回显需要修改的数据
        if ($id = $request->get('id')) {
            if ($request->post()) {
                $address = ShippingAddress::findOne(['id' => $id]);
                $address->name = $request->post('name');
                $address->p_id = $request->post('p_id');
                $address->c_id = $request->post('c_id');
                $address->a_id = $request->post('a_id');
                $address->address = $request->post('address');
                $address->tel = $request->post('tel');
                $address->select = $request->post('select');
                $address->member_id = 1;
                if ($address->validate()) {
                    $address->save();
                    return ['status' => true, 'msg' => '修改成功'];
                }
                //验证失败
                return ['status' => false, 'msg' => $address->getErrors()];

            }

            $address = ShippingAddress::find()->where(['id' => $id])->asArray()->one();
            return ['status' => true, 'msg' => '', 'result' => $address];
        }
        return ['status'=>false,'msg'=>'参数错误'];
    }

    //删除地址
    public function actionUserAddressDel(){
        if($address_id = \Yii::$app->request->get('id')){
            $address = ShippingAddress::findOne(['id'=>$address_id]);
            $address->delete();
            return ['status' => true, 'msg' => '删除成功'];
        }
        return ['status' => false, 'msg' => '操作失败'];
    }


    //获取所有商品分类
    public function actionGoodsCategoryAll(){

        $models = GoodsCategory::find()->asArray()->all();
        return ['status'=>true,'msg'=>'','result'=>$models];

    }


    public function actionGoodsCategory(){
        $request =\Yii::$app->request;

        //获取某分类的子分类
        if($param = $request->get('child')){
            //找到当前分类
            $obj = GoodsCategory::findOne(['id'=>$param]);

            if($obj == null){
                //当前分类都不存在
                return ['status'=>false,'msg'=>'该分类不存在'];
            }else{
                //找子分类
                $models = GoodsCategory::find()->where(['parent_id'=>$param])->asArray()->all();
                return ['status'=>false,'msg'=>'','result'=>$models];
            }

        }
        //获取某分类的父分类
        if($param = $request->get('parent')){
            //找到当前分类
            $obj = GoodsCategory::find()->where(['id'=>$param])->one();

            if($obj == null){
                //当前分类都不存在
                return ['status'=>false,'msg'=>'该分类不存在'];
            }else{
                $models = GoodsCategory::find()->where(['id'=>$obj->parent_id])->asArray()->one();
                return ['status'=>false,'msg'=>'','result'=>$models];
            }

        }
        return ['status'=>false,'msg'=>'参数不正确'];

    }

    //-获取某分类下面的所有商品（不考虑分页）,如果是上级分类会直接获取到最底层分类下的商品
    public function actionGoodsByCate(){
        if($cate_id = \Yii::$app->request->get('cate_id')){
            $cate = GoodsCategory::findOne(['id'=>$cate_id]);
            $leaves = $cate->leaves()->all();
            $ids = ArrayHelper::map($leaves,'id','id');
            $ids[$cate_id] = $cate_id - 0;
            $models = Goods::find()->where(['in','goods_category_id',$ids])->asArray()->all();
            return ['status'=>true,'msg'=>'','result'=>$models];
        }
        return ['status'=>false,'msg'=>'参数不正确'];
    }

    //-获取某品牌下面的所有商品（不考虑分页）
    public function actionGoodsByBrand(){

        if($brand_id = \Yii::$app->request->get('brand_id')){
            $models = Goods::find()->where(['brand_id'=>$brand_id])->asArray()->all();
            return ['status'=>true,'msg'=>'','result'=>$models];
        }
        return ['status'=>false,'msg'=>'参数不正确'];
    }

    //文章分类
    public function actionArticleCate(){
        $models = ArticleCategory::find()->asArray()->all();
        return ['status'=>false,'msg'=>'','result'=>$models];

    }

    //-获取某分类下面的所有文章
    public function actionArticleByCate(){
        if($cate_id = \Yii::$app->request->get('cate_id')){
            $models = Article::find()->where(['article_category_id'=>$cate_id])->asArray()->all();
            return ['status'=>true,'msg'=>'','result'=>$models];
        }
        return ['status'=>false,'msg'=>'参数不正确'];
    }

    //-获取某文章所属分类
    public function actionCateByArticle(){
        if($id = \Yii::$app->request->get('id')){
            $article = Article::findOne(['id'=>$id]);
            $model = ArticleCategory::find()->where(['id'=>$article->article_category_id])->asArray()->one();
            return ['status'=>true,'msg'=>'','result'=>$model];
        }
        return ['status'=>false,'msg'=>'参数不正确'];

    }

//-添加商品到购物车
    public function actionAddToCart(){
        $request = \Yii::$app->request;
        $goods_id = $request->post('goods_id');
        $amount = $request->post('amount');

        $goods = Goods::findOne(['id'=>$goods_id]);
        if($goods == null){
            return ['status'=>false,'msg'=>'商品不存在'];
        }
        //查询当前cookie是否有商品
        $cookies = \Yii::$app->request->cookies;
        if($cookies->get('cart') == null){
            $cart = [];
        }else{
            $cart = unserialize($cookies->get('cart')->value);
        }
        if(\Yii::$app->user->isGuest){
            //存放到cookie 构造数组$cart [商品id=>商品数量]
            if(key_exists($goods->id,$cart)){
                $cart[$goods_id] += $amount; //更新
            }else{
                $cart[$goods_id] = $amount; //新增
            }
            $cookies = \Yii::$app->response->cookies;
            $cookie = new Cookie([
                'name'=>'cart',
                'value'=>serialize($cart)
            ]);
            $cookies->add($cookie);
        }else{
            //已经登录存数据库
            $obj = Cart::findOne(['member_id'=>\Yii::$app->user->id,'goods_id'=>$goods_id]);
            if($obj == null){
                $model = new Cart([
                    'member_id'=>\Yii::$app->user->id,
                    'goods_id'=>$goods_id,
                    'amount'=>$amount,
                ]);
                $model->save();
            }else{
                $obj->amount += $amount;
                $obj->save();
            }
        }
        return ['status'=>true,'msg'=>''];
    }

//-修改购物车某商品数量
    public function actionUpdateGoodsCart(){
        $request = \Yii::$app->request;
        $goods_id = $request->post('goods_id');
        $amount = $request->post('amount');

        $goods = Goods::findOne(['id'=>$goods_id]);
        if($goods == null ){
            return ['status'=>false,'msg'=>'商品不存在'];
        }

        $cookie = $request->cookies->get('cart');
        if($cookie == null){
            $cart = [];
        }else{
            $cart = unserialize($cookie->value);
        }

        if(\Yii::$app->user->isGuest){
            $cart[$goods_id] = $amount; //直接替换数量

            $cookies = new Cookie([
                'name'=>'cart',
                'value'=>serialize($cart)
            ]);
            \Yii::$app->response->cookies->add($cookies); //更新cookie

        }else{
            //数据库更新
            $cart_goods = Cart::findOne(['member_id'=>\Yii::$app->user->id,'goods_id'=>$goods_id]);
            $cart_goods->amount = $amount;
            $cart_goods->save();

        }
        return ['status'=>true,'msg'=>''];

    }

//-删除购物车某商品
    public function actionDelGoodsCart(){
        $request = \Yii::$app->request;
        $goods_id = $request->post('goods_id');

        $goods = Goods::findOne(['id'=>$goods_id]);
        if($goods == null ){
            return ['status'=>false,'msg'=>'商品不存在'];
        }

        $cookie = $request->cookies->get('cart');
        if($cookie == null){
            $cart = [];
        }else{
            $cart = unserialize($cookie->value);
        }

        if(\Yii::$app->user->isGuest){
            if(key_exists($goods->id,$cart)) unset($cart[$goods_id]);//删除
            $cookies = new Cookie([
                'name'=>'cart',
                'value'=>serialize($cart)
            ]);

            \Yii::$app->response->cookies->add($cookies);

        }else{
            $cart_goods = Cart::findOne(['member_id'=>\Yii::$app->user->id,'goods_id'=>$goods_id]);
            $cart_goods->delete();

        }
        return ['status'=>true,'msg'=>''];
    }

//-清空购物车
    public function actionDelCart(){

        if(\Yii::$app->user->isGuest){
            $request = \Yii::$app->request;
            $cookie = $request->cookies->get('cart');
            if($cookie == null) {
                return ['status' => false, 'msg' => '已经清空'];

            }
            \Yii::$app->response->cookies->remove($cookie);

        }else{
            $cart_goods_all = Cart::find()->where(['member_id'=>\Yii::$app->user->id])->all();
            if($cart_goods_all == null){
                return ['status'=>false,'msg'=>'已经清空'];
            }
            foreach ($cart_goods_all as $cart_goods){
                $cart_goods->delete();
            }
        }

        return ['status'=>true,'msg'=>''];
    }
//-获取购物车所有商品
    public function actionGetCartAll(){
        $models = Cart::find()->where(['member_id'=>\Yii::$app->user->id])->asArray()->all();
        return ['status'=>true,'msg'=>'','result'=>$models];
    }

//-获取支付方式
    public function actionGetPayments(){
        return ['status'=>true,'msg'=>'','result'=>Order::$payments];
    }

//-获取送货方式
    public function actionGetDeliveries(){
        return ['status'=>true,'msg'=>'','result'=>Order::$deliveries];
    }
//-提交订单
    public function actionSendOrder(){
        $request = \Yii::$app->request;
        $address_id = $request->post('address_id'); //获取地址id
        $delivery_id = $request->post('delivery_id');//获取送货方式id
        $payment_id = $request->post('payment_id');//获取付款方式id
        $total = $request->post('total');//获取总金额
        //根据各种id查询order表需要的数据
        $address = ShippingAddress::findOne(['id' => $address_id]);
        //var_dump($address_id);exit;

        //新建订单对象
        $order = new Order();
        //给字段赋值
        $order->member_id = \Yii::$app->user->id;
        $order->name = $address->name;
        $order->province = $address->province->name;
        $order->city = $address->city->name;
        $order->area = $address->area->name;
        $order->address = $address->address;
        $order->tel = $address->tel;
        $order->total = $total;
        //客户提交的数据都需要验证，服务端保存的静态数据不需要验证
        if ($order->validate()) {
            $order->delivery_id = $delivery_id;
            $order->delivery_name = Order::$deliveries[$delivery_id]['delivery_name'];
            $order->delivery_price = Order::$deliveries[$delivery_id]['delivery_price'];
            $order->payment_id = $payment_id;
            $order->payment_name = Order::$payments[$payment_id]['payment_name'];
        }
        $order->create_time = time();
        //4种状态 订单状态（0已取消1待付款2待发货3待收货4完成）
        //除了货到付款 其余的都是待付款
        $payment_id == 1 ? $order->status = 2 : $order->status = 1;

        //并发处理-保存成功的时候同时保存数据到订单详情表
        //开启事物
        $transaction = \Yii::$app->db->beginTransaction();
        try {
            $order->save();
            //如果订单表保存成功，就开始保存到订单详情表
            //查询购物车
            $carts = Cart::findAll(['member_id' => \Yii::$app->user->getId()]);
            foreach ($carts as $cart) {
                $order_goods = new OrderGoods();
                $order_goods->order_id = $order->id;
                $order_goods->goods_id = $cart->goods_id;
                $goods = Goods::findOne(['id' => $cart->goods_id]);
                if ($goods->stock < $cart->amount) {
                    throw new Exception('已经没货了');
                }
                $order_goods->amount = $cart->amount;
                //商品的名称价格图片有可能变动不能从商品表中读取，应当从订单表中读取?未实现
                $order_goods->goods_name = $goods->name;
                $order_goods->logo = $goods->logo;
                $order_goods->price = $goods->shop_price;
                $order_goods->total = $cart->amount * $goods->shop_price;
                $order_goods->save();
                //减少库存商品
                $goods->stock -= $cart->amount;
                $goods->save();
                //清空购物车
                $cart->delete();

            }
            $transaction->commit();//提交事务
        } catch (Exception $e) {
            $transaction->rollBack();//回滚
        }

        //返回订单的id 给下一级查询做为参数
        return ['status'=>true,'msg'=>''];
    }
//-获取当前用户订单列表
    public function actionGetOrder(){
        $orders = Order::find()->where(['member_id'=>\Yii::$app->user->id])->asArray()->all();
        return ['status'=>true,'msg'=>'','result'=>$orders];
    }
//-取消订单
    public function actionCancelOrder(){
        $orders = Order::find()->where(['member_id'=>\Yii::$app->user->id])->all();
        foreach ($orders as $order){
            $order->delete();
        }
        return ['status'=>true,'msg'=>''];

    }
    
    //文件上传
    public function actionUpload()
    {
       $img = UploadedFile::getInstanceByName('img'); //接收文件
       if($img){
           $filename = '/upload/'.uniqid().'.'.$img->extension;
          $rs = $img->saveAs(\Yii::getAlias('@webroot').$filename,0); //保存文件
           if($rs){
               return ['status'=>true,'msg'=>'','result'=>$filename];
           }
           return ['status'=>false,'msg'=>$img->error];
       }
        return ['status'=>false,'msg'=>'没有文件上传'];

    }

    //分页测试
    public function actionPage()
    {
        $request = \Yii::$app->request;
        $per_page = $request->get('per_page',2); //每页条数
        $page = $request->get('page',1); //当前页
        $page = $page<1?1:$page;
        $keywords = $request->get('keywords');
        $query = Goods::find();
        //搜索分页 其实就是先根据条件搜索出结果，再根据结果分页
        if($keywords){
            $query->andWhere(['like','name',$keywords]); //搜索
        }

        $total = $query->count(); //总条数

        $goods = $query->offset(($page-1)*$per_page)->limit($per_page)->asArray()->all();

        return ['status'=>true,'msg'=>'','result'=>[
            'total'=>$total,
            'per_page'=>$per_page,
            'page'=>$page,
            'data'=>$goods
        ]];


    }
    
    //发短信接口
    public function actionSms()
    {
        //接收前端ajax传过来的参数
        $tel = \Yii::$app->request->post('tel');
        if(!preg_match('/^1[34578]\d{9}$/',$tel)){
            return ['status'=>false,'msg'=>'电话号码不正确'];
        }
        $value = \Yii::$app->cache->get('time_tel_'.$tel);
        if($s = time()-$value<60){
            return ['status'=>false,'msg'=>'请'.(60-$s).'秒后再发送'];

        }
        //直接调用Yii配置app来发送短信
        $code = rand(1000,9999);

        $result = \Yii::$app->sms->setNum($tel)->setParam(['code'=>$code])->send();
        if($result){

            //保存当前的验证码 这样好对比发送的验证码和与用户输入的验证
//            \Yii::$app->session->set('tel_'.$tel,$code); // 方法一：电话号码和短信验证码配套保存,配套验证
            \Yii::$app->cache->set('tel_'.$tel,$code,10*60); //方法二：yii2的缓存技术,这样可以设置过期时间
            \Yii::$app->cache->set('time_tel_'.$tel,time(),10*60); //发送时间戳

            return ['status'=>true,'msg'=>''];

        }else{
            return ['status'=>false,'msg'=>'发送失败'];

        }
    }
}